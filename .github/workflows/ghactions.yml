name: Release Builds

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      buildwin:
        type: boolean
      buildosx:
        type: boolean
      buildlin:
        type: boolean
      buildtest:
        type: boolean

jobs:
  build-win:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, 'please release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildwin == 'true')
    steps:
      - uses: actions/checkout@v3
      - name: Get Nim
        run: |
          curl -L https://github.com/nim-lang/nightlies/releases/download/latest-version-2-0/macosx_x64.tar.xz --output macosx_x64.tar.xz
          tar xf macosx_x64.tar.xz
      - name: Configure Nim
        run: |
          echo "${PWD}/nim-2.0.1/bin" >> $GITHUB_PATH
          echo "$HOME/.nimble/bin" >> $GITHUB_PATH
      - name: Test Nim
        run: nim -v
      - name: dependencies
        run: nimble install -d -Y
      - name: cross compiler
        run: nimble install https://github.com/iffy/nimxc.git

      - name: build windows (aelm-win-x64.exe)
        run: |
          nimxc c -d:mingw --target windows-amd64 -o:win_build.exe -d:danger --panics:on build
          mv src/aelm.exe aelm-win-x64.exe
      - name: Upload Windows Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: win_build.exe
          asset_name: win_build.exe
          tag: latest
          overwrite: true
  build-mac:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, 'please release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildosx == 'true')
    steps:
      - uses: actions/checkout@v2
      - name: download nim source
        run: |
          git clone --depth=1 -b v1.6.2 https://github.com/nim-lang/nim
          echo "NIM_TAG=$(git --git-dir nim/.git tag -l)" >> $GITHUB_ENV
      - name: inspect nim version
        run: |
          echo "nim version: $NIM_TAG"
      - name: Load cached nim compiler
        id: cache-nim
        uses: actions/cache@v2
        with:
          path: |
            nim/bin
          key: ${{ runner.os }}-${{ env.NIM_TAG }}
      - name: compile nim
        if: steps.cache-nim.outputs.cache-hit != 'true'
        run: |
          cd nim
          git clone --depth=1 https://github.com/nim-lang/csources_v1
          cd csources_v1
          bash build.sh
          cd ..
          bin/nim c -d:release koch
          ./koch boot -d:release
          ./koch nimble
          cd ..
      - name: init-nim
        run: |
          echo "${PWD}/.nimble/bin" >> $GITHUB_PATH
          echo "${PWD}/nim/bin" >> $GITHUB_PATH
      - name: check-versions
        run: |
          nim -v
      - name: Build package
        run: |
          echo "building x86_64 target..."
          sudo xcode-select --switch /Applications/Xcode_11.7.app
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx10.15 --show-sdk-platform-version)" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun -sdk macosx10.15 --show-sdk-path)" >> $GITHUB_ENV
          nim c -o:osx_build.x64 --gc:arc -d:danger --panics:on -l:"-target x86_64-apple-macos10.13" -t:"-target x86_64-apple-macos10.13" build
          strip osx_build.x64
          echo "building arm64 target..."
          sudo xcode-select --switch /Applications/Xcode_12.4.app
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version)" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path)" >> $GITHUB_ENV
          nim c -o:osx_build.arm64 --gc:arc -d:danger --panics:on -l:"-target arm64-apple-macos11.1" -t:"-target arm64-apple-macos11.1" build
          strip osx_build.arm64
          echo "building universal executable..."
          lipo -create -output osx_build osx_build.arm64 osx_build.x64
      - name: Upload OSX Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: osx_build
          asset_name: osx_build
          tag: latest
          overwrite: true
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: centos:7 #centos/devtoolset-7-toolchain-centos7
    if: contains(github.event.head_commit.message, 'please release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildlin == 'true')
    steps:
      - uses: actions/checkout@v3
      - name: Load cached system packages
        id: cache-rpm
        uses: actions/cache@v2
        with:
          path: |
            /var/cache/yum/x86_64/7/base/packages
          key: centos7packages
      - name: Install DevTools
        run: |
          yum install -y epel-release
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum install gcc autoconf automake make binutils glibc glibc-devel glibc-static git -y
      - name: Load cached musl
        id: cache-musl
        uses: actions/cache@v2
        with:
          path: |
            musl
          key: ${{ runner.os }}-musl
      - name: Get and Build Musl
        if: steps.cache-musl.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 git://git.musl-libc.org/musl musl
          cd musl
          ./configure --prefix="$PWD/../muslbin"
          make -j2 #--with-arch=x86_64 -j2
          make install
          cd ..
      - uses: iffy/install-nim@v5
      - name: Get Nim
        run: nimble install -y
      - name: Test Nim first
        run: nim -v
      - name: build
        run: nim c -o:lin_build -d:danger --panics:on --cc.exe:muslbin/bin/musl-gcc --cc.linkerexe:muslbin/bin/musl-gcc --passC:-std=gnu99 build
      - name: See Size
        run: ls -lh lin_build
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: ./lin_build
          args: --best -q
      - name: Upload Linux Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lin_build
          asset_name: lin_build
          tag: latest
          overwrite: true
  build-mac-test:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, 'please release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildtest == 'true')
    steps:
      - name: TestOSX
        run: |
          xcodebuild -sdk -version
