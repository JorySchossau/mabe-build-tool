name: Release Builds

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Real Path
        run: |
          echo "will compute the path"
          echo ::set-env name=REALPATH::$(python -c "import os; import sys; print(os.path.realpath(sys.argv[1]))")
          echo "Path is: $REALPATH"
      - name: Download MacOS SDK
        run: curl --output sdk.tar.xz -L "https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.13.sdk.tar.xz"
      - name: Exctract SDK
        run: |
          ls -lh sdk.tar.xz
          tar xf sdk.tar.xz
          ls .
      - name: Add Nim Path
        run: echo "::add-path::/github/home/.nimble/bin"
      - name: set environment variables
        uses: allenevans/set-env@v1.0.0
        with:
          overwrite: true
          MACOSX_DEPLOYMENT_TARGET: '10.13'
          SDKROOT: '/github/home/MacOSX10.13.sdk'
      - name: Download Nim and Compile
      #  env:
      #    MACOSX_DEPLOYMENT_TARGET: 10.13
      #    SDKROOT: /github/home/MacOSX10.13.sdk
        run: |
          curl --output init.sh https://nim-lang.org/choosenim/init.sh
          sh init.sh -y
          nim -v
          nim c -o:osx_build -d:danger --panics:on build
          ls -lh osx_build
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: centos:7 #centos/devtoolset-7-toolchain-centos7
    steps:
      - name: DoCrash
        run: which yum
      - name: Install DevTools
        run: |
          yum install gcc autoconf automake make binutils glibc glibc-devel glibc-static -y
          #yum group install "Development Tools" -y
          #yum install glibc-static libstdc++-static -y
      - uses: actions/checkout@v2
      - name: dl-choosenim
        run: curl --output init.sh https://nim-lang.org/choosenim/init.sh
      - name: install-nim
        run: sh init.sh -y
      - name: init-nim
        run: echo "::add-path::/github/home/.nimble/bin"
      - name: check-versions
        run: |
          nim -v
          ld -v
      - name: build
        run: nim c -o:lin_build -d:danger --panics:on --passL:--static --passC:-std=gnu99 build
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          file: ./lin_build
          args: --best -q
      - name: See Size
        run: ls -lh lin_build
      - name: Upload Linux Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lin_build
          asset_name: lin_build
          tag: ${{ github.ref }}
